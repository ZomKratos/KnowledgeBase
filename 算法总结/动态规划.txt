动态规划(DP)类型划分：
1.基础问题：费伯纳西数列、爬楼梯、不同路径、整数拆分、不同二叉搜索树(树的动态规划)
2.背包问题
3.打家劫舍
4.股票问题
5.子序列问题：最长连续递增子序列、求最长递增子序列、最长重复子数组、最长公共子序列。子数组要求连续，子序列不要求连续。——在子数组中问题中dp[i，j]是串1以s1[i]结尾，串2以s2[j]结尾的最长重复子串。在子序列问题中dp[i，j]是串1解锁到s1[i]，串2解锁到s2[j]的最长重复子序列。
6.基础编辑距离问题、编辑距离问题：改写多少个字符能让两个字符串相同——i是串1从开头到i的字符串，j是串2从开头到j的字符串。
7.回文子串问题、回文子序列问题——i，j是字符串的头和尾。

费伯纳西数列实际上也是递归最经典的题目，但是递归写的话很容易超时，所以还是用动态规划写好。

解题的五个部分：
1.确定dp数组的含义
2.由dp数组的含义确定递推公式
3.由递推公式确定dp数组初始化方式
4.由递推公式确定遍历顺序
5.打印数组检查(仅用来debug检查)

经典例题：
1.爬楼梯：每次可爬1或2层，问爬到n层有几种方法。
dp数组含义：爬到n层有dp[n]种方法
递推公式：dp[n] = dp[n - 1] + dp[n - 2]
初始化：dp[1] = 1;dp[2] = 2;
遍历顺序：从前向后

2.整数拆分：把一个整数n拆成k个整数的和(k >= 2)，问这些整数乘积的最大值。
思路：n可以拆成i和n-i，n-i又可以再拆，所以要用i从2遍历到n，维护乘积的最大值。因为k>=2，所以dp必须拆。
dp数组含义：拆n得到的数乘积最大值为dp[n]
递推公式：
	for(int i = 2; i <= n; i++)
        {
            for(int j = 1; j <= i / 2; j++)
            {
                dp[i] = Math.Max(dp[i], Math.Max(j * (i - j), j * dp[i - j]));
            }           
        }

3.不同二叉搜索树：给一个整数n，求由1到n不同的节点能组成多少种不同的二叉搜索树。(不同树形)
思路：n个节点的情况下左子树有n- 1种节点数量情况(拥有0个节点，拥有1个节点，拥有2个节点，...，拥有n - 1个节点)。
dp数组含义：有n个节点的搜索树有dp[n]种
递推公式：
        int[] dp = new int[n + 2];
        dp[0] = 1;
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i <= n; i++)
        {
            for(int j = 0; j <= i - 1; j++)
            {
                dp[i] += dp[j] * dp[i - 1 - j];
            }
        }

4.01背包问题：m个物品，每个物品只有1一个，限重n，求背包的最大价值。
思路：使用二维dp数组，i是解锁到的物品，j是从0到n的重量。
递推公式：dp[i][j] = max(dp[ i - 1 ][  j ], dp[ i - 1 ][ j - weight[ i ] ] + value[ i ])
遍历顺序：位置dp[i][j]由左上角的值得来，所以从左到右和从上到下都可以。

5.01背包问题——分割等和子集：给一个数组，问能否把它分割为等和的两部分，返回bool值。一个隐藏的01背包问题！
思路：其实可以把它看做一个背包问题，背包限重为sum = nums.sum() / 2，物品的重量和价值相等，就是数组给出的数值。问题转变为在遍历过程中背包重量从1增长到sum，问此时背包的价值是否能达到了sum / 2，即dp[len,sum]是否等于sum。
递推公式：dp[i][j] = max(dp[ i - 1 ][  j ], dp[ i - 1 ][ j - weight[ i ] ] + value[ i ])，其实就是背包问题的递推公式。

6.01背包问题——装满背包有多少种方法类——目标和：给一个整数数组和一个目标和target，向数组中每个整数前加+或-号，使串联起来的表达式和为target，返回能达成目标的表达式的数目。
思路：相当于把数组分成两个部分，用左部分的和减右部分的和等于target，则有left + right = sum，left - right = target，于是可以求出left，问题转变为填满限重为left的背包有多少种方式，dp[i，j]的含义为解锁到物品i，装满限重为j的背包有dp[i,j]种方式。
递推公式：
	for(int i = 1; i <= len; i++)
        {
            for(int j = 0; j <= left; j++)
            {
                if(j < nums[i - 1])
                {
                    dp[i, j] = dp[i - 1, j];
                }
                else
                {
                    dp[i, j] = dp[i - 1, j] + dp[i - 1, j - nums[i - 1]];
                }               
            }
        }
注意：dp[0,0]要初始化为1，并且由于数组有可能出现0，j要从0开始遍历。

7.01背包问题——三维背包类——一和零：给一个包含二进制字符的字符数组strs和m、n两个整数，找出strs的最大子集的长度，限制子集中最多有m个0和n个1。
思路：是三维的01背包问题，把传统的限重改成限m和限n，每个物品有两个重量m和n。
递推公式：
        for (int i = 1; i <= length; i++) {
            int[] zerosOnes = GetZerosOnes(strs[i - 1]);
            int zeros = zerosOnes[0], ones = zerosOnes[1];
            for (int j = 0; j <= m; j++) {
                for (int k = 0; k <= n; k++) {
                    dp[i, j, k] = dp[i - 1, j, k];
                    if (j >= zeros && k >= ones) {
                        dp[i, j, k] = Math.Max(dp[i, j, k], dp[i - 1, j - zeros, k - ones] + 1);
                    }
                }
            }
        }
注意：把内层循环(即限重)的值从0开始遍历，不会出错还能包括更多情况。

8.完全背包问题：背包限重m，有n个物品，每个物品有无限个。和01背包问题唯一的区别就是它的递推公式是从左取而不是从左上取。
递推公式：dp[i][j] = max(dp[ i - 1 ][  j ], dp[ i ][ j - weight[ i ] ] + value[ i ])。

9.完全背包问题——凑满限重的最少物品数量类——零钱兑换：给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额，返回可以凑成总金额所需的 最少的硬币个数 。
递推公式：dp[i, j] = Math.Min(dp[i - 1, j], dp[i, j - coins[i - 1]] + 1);
初始化：因为第0行可能会赋值给第一行，并且第0行不可能凑出所需的金额，所以把第0行设置为最大值(amount + 1)。第0列会在其他列凑出j的时候访问，所以把第0列设置为0(初始化也是0，自然不需要设置)。
代码：
	for(int i = 1; i <= len; i++)
        {
            for(int j = 1; j <= amount; j++)
            {
                if(j >= coins[i - 1])
                {
                    dp[i, j] = Math.Min(dp[i - 1, j], dp[i, j - coins[i - 1]] + 1);
                }
                else
                {
                    dp[i, j] = dp[i - 1, j];
                }
            }
        }

10.完全背包问题——凑满限重的最少物品数量类——完全平方数：给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。1、4、9等数字是完全平方数。
递推公式：dp[i, j] = Math.Min(dp[i - 1, j], dp[i, j - coins[i - 1]] + 1);
初始化：因为第0行可能会赋值给第一行，并且第0行不可能凑出所需的金额，所以把第0行设置为最大值(amount + 1)。

11.可以用完全背包，不用的话更好理解——单词拆分：给你一个字符串 s 和一个字符串列表 wordDict 作为字典。如果可以利用字典中出现的一个或多个单词拼接出 s 则返回 true。
思路：dp[i]的含义为字典中字符串能否拼到s[i]，遍历s，每次都列出剩下的字符串，查看字典中是否持有，有则标记dp[i + len]为true。
	for(int i = 1; i <= len; i++)
        {
            if (dp[i - 1] == true)
            {
                for(int j = i; j <= len; j++)
                {
                    int tmpLen = j - i + 1;
                    if (words.Contains(s.Substring(i - 1, tmpLen)))
                    {
                        dp[i + tmpLen - 1] = true;
                    }
                }
            }
        }

11.打家劫舍：给定一个代表每个房屋存放金额的非负整数数组，计算在不连偷两户的情况下 ，一夜之内能够偷窃到的最高金额。
思路：常见的动态规划问题，dp[i] = Math.Max(dp[i - 1], dp[i - 2] + nums[i - 1])。

12.打家劫舍2：房屋围起来，首尾相连，其余规则和打家劫舍一致。
思路：首尾不能连着偷，所以可以先去掉尾计算一次，然后去掉首计算一次，取两次的最大值就是答案。

13.打家劫舍3：房屋是树形结构。
思路：从下往上遍历，后续遍历，分别获取左子和右子偷和不偷的四个收获值，再计算本节点偷和不偷的收获值。
    public (int, int) RobFunc(TreeNode root)
    {
        if (root == null) return (0, 0);
        (int, int) left = RobFunc(root.left);
        (int, int) right = RobFunc(root.right);
        int val1 = root.val + left.Item1 + right.Item1;//偷
        int val2 = Math.Max(left.Item1, left.Item2) + Math.Max(right.Item1, right.Item2);//不偷
        return (val2, val1);
    }

14.股票买卖问题1：给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格，只能买一次卖一次，求最大利润。
思路：贪心算法适用于股票问题1，迭代中记录遇到的最小股价，每次循环用当天股价减去最小股价算出利润，维护最大利润。
代码：
        for(int i = 0; i < prices.Length; i++)
        {
            if (prices[i] < min)
            {
                min = prices[i];
            }
            else
            {
                max = Math.Max(max, prices[i] - min);
            }
        }
然后是正规解法动态规划，动态规划也用于解决股票问题2、3、4等。
思路：创建二维dp数组dp[len, 2]，记录每天不持有股票或持有股票两种情况下的最大利润。
递推公式：
        dp[0, 0] = 0;
        dp[0, 1] = -prices[0];
        dp[0, 2] = 0;
        for(int i = 1; i < len; i++)
        {
            dp[i, 0] = dp[i - 1, 0];
            dp[i, 1] = Math.Max(dp[i - 1, 1], dp[i - 1, 0] - prices[i]);
            dp[i, 2] = Math.Max(dp[i - 1, 2], dp[i - 1, 1] + prices[i]);
        }
这个0就是保证只能买卖一次的关键，当第二次买时只比较股票是否是更小的价格。

15.股票买卖问题2：问题同1，区别在于股票可以买卖多次，但是同一时间只能持有一只股票。
思路：可以无限次买卖，则只剩下两种情况。
递推公式：
        for (int i = 1; i < len; i++)
        {
            dp[i, 0] = Math.Max(dp[i - 1, 0], dp[i - 1, 1] + prices[i]);
            dp[i, 1] = Math.Max(dp[i - 1, 1], dp[i - 1, 0] - prices[i]);
        }

16.股票买卖问题3(困难)：问题同1，区别在于股票可以买卖两次，同一时间只能持有一只股票。
思路：dp数组的初始化要从dp[len, 2]变成dp[len, 5]，因为有五种状态。第一种状态是dp[i, 0] = dp[i - 1， 0];也可以去除这种状态转而把dp[i, 1] = Math.max(dp[i - 1, 1], dp[i - 1, 0] - prices[i]);的dp[i - 1, 0]直接写成0。
递推公式：
        for (int i = 1; i < n; ++i) {
            dp[i, 0] = dp[i - 1， 0];								//不操作
            dp[i, 1] = Math.max(dp[i - 1, 1], dp[i - 1, 0] - prices[i]);	//第一次持股
	    dp[i, 2] = Math.max(dp[i - 1, 2], dp[i - 1, 1] + prices[i]);	//第一次不持股
	    dp[i, 3] = Math.max(dp[i - 1, 3], dp[i - 1, 2] - prices[i]);	//第二次持股
            dp[i, 4] = Math.max(dp[i - 1, 4], dp[i - 1, 3] + prices[i]);	//第二次不持股
        }
注意：状态的顺序是买-卖-买-卖，即第一次持股-第一次不持股-第二次持股-第二次不持股。

17.股票买卖问题4(困难)：问题同1，区别在于股票可以买卖k次，同一时间支持有一只股票。
思路：把dp数组初始化为dp[len, 2k + 1]，内部加一个循环。
递推公式：
        dp[0, 0] = 0;
        dp[0, 1] = -prices[0];
	dp[2, 0] = 0l
	....//即i为奇数的时候把dp[0, i]设置为-prices[0]
        for (int i = 1; i < n; ++i) {
	    for(int j = 0; j < 2k; j+= 2){						
                dp[i, j +1] = Math.max(dp[i - 1, j + 1], dp[i - 1, j ] - prices[i]);
	        dp[i, j + 2] = Math.max(dp[i - 1, j + 2], dp[i - 1, j + 1] + prices[i]);	
        }

18.最长连续递增子序列(简单)：给定一个未经排序的整数数组，找到最长且 连续递增的子序列，并返回该序列的长度。
思路：dp[i]含义是以nums[i]结尾的子序列的最大长度。每个dp[i]取决于能否连上dp[i - 1]子序列。
递推公式：
        for(int i = 1; i < len; i++){
            if(nums[i] > nums[i - 1]){
                dp[i] = dp[i - 1] + 1;
            }
            else{
                dp[i] = 1;
            }
            max = Math.Max(max, dp[i]);
        }

19.最长递增子序列(中等)：给定一个未经排序的整数数组，找到最长但不用连续的子序列，并返回该序列的长度。
思路：dp[i]含义是以nums[i]结尾的子序列的最大长度。由于子序列不用连续，每个dp[i]不止取决于能否连上dp[i - 1]子序列，还取决于能否连上i之前的子序列。
递推公式：
        for(int i = 1; i < len; i++)
        {
            int tmpMax = 1;
            for(int j = 0; j < i; j++)
            {
                if (nums[i] > nums[j])
                {
                    tmpMax = Math.Max(tmpMax, dp[j] + 1);
                }
            }
            dp[i] = tmpMax;
            max = Math.Max(max, dp[i]);
        }

20.最长重复子数组(中等)：给两个整数数组 nums1 和 nums2 ，返回 两个数组中 公共的 、长度最长的连续子数组的长度 。
思路：由于有两个数组，想到定义二维dp数组，由于是连续子数组，如果设置dp[i, j]为以nums1[i - 1]结尾和以nums2[j - 1]结尾的相同子数组的长度，那么则有当nums1[i] == nums2[j]时，dp[i, j] = dp[i - 1, j - 1]；当nums1[i] != nums2[j]时，dp[i, j] = 0。
递推公式：
        for(int i = 1; i <= len1; i++)
        {
            for(int j = 1; j <= len2; j++)
            {
                if (nums1[i - 1] == nums2[j - 1])
                {
                    dp[i, j] = dp[i - 1, j - 1] + 1;
                    max = Math.Max(max, dp[i, j]);
                }
            }
        }

21.最长公共子序列(中等)：给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。跟上一题的区别是公共子序列不要求是连续的。
思路：由于有两个数组，想到定义二维dp数组。由于子序列不需要连续，所以设置dp[i, j]为解锁到text1[i]，text2[j]的最长相同子序列的长度。
公共子序列题规律：即子序列连续就定义dp为以nums1[i]结尾和以nums2[j]结尾的子串长度；子序列不连续就定义dp为解锁到nums1[i]和以nums2[j]的子串长度。
递推公式：
        for(int i = 1; i <= len1; i++)
        {
            for(int j = 1; j <= len2; j++)
            {
                if (text1[i - 1] == text2[j - 1])
                {
                    dp[i, j] = dp[i - 1, j - 1] + 1;                   
                }
                else
                {
                    dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]);
                }
            }
        }

22.不相交的线(中等)：在两条独立的水平线上按给定的顺序写下 nums1 和 nums2 中的整数。现在，可以绘制一些连接两个数字 nums1[i] 和 nums2[j] 的直线，这些直线需要同时满足满足：
1.nums1[i] == nums2[j]
2.且绘制的直线不与任何其他连线（非水平线）相交。
以这种方法绘制线条，并返回可以绘制的最大连线数。
思路：设置dp[i, j]为解锁到nums1[i]和nums2[j]能绘制的最大连线数，则当nums1[i] == nums2[j]，dp[i, j] = dp[i - 1, j - 1] + 1;当nums1[i] != nums2[j]，dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1])。
递推公式：
            for(int j = 1; j <= len2; j++){
                if(nums1[i - 1] == nums2[j - 1]){
                    dp[i, j] = dp[i - 1, j - 1] + 1;
                }
                else{
                    dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]);
                }
            }

23.编辑距离问题简化版——两个字符串的删除操作：给定两个单词 word1 和 word2 ，返回使得 word1 和  word2 相同所需的最小步数。
思路：设置dp[i, j]为从word1和word2开头到以word1[i]和word2[j]结尾的两个字符串想要相同要删除的最小步数。则有当word1[i] == word2[j]， dp[i, j] = dp[i - 1, j - 1];当word1[i] != word2[j]，dp[i, j] = Math.Min(dp[i - 1, j], dp[i, j - 1]) + 1。
递推公式：
        for(int i = 1; i <= len1; i++){
            for(int j = 1; j <= len2; j++){
                if(word1[i - 1] == word2[j - 1]){
                    dp[i, j] = dp[i - 1, j - 1];
                }
                else{
                    dp[i, j] = Math.Min(dp[i - 1, j], dp[i, j - 1]) + 1;
                }
            }
        }
注意初始化：
        for(int i = 0; i <= len1; i++){
            dp[i, 0] = i;
        }
        for(int j = 1; j <= len2; j++){
            dp[0, j] = j;
        }

24.经典题目——编辑距离问题(中等)：给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2 所使用的最少操作数  。
你可以对一个单词进行如下三种操作：插入一个字符、删除一个字符、替换一个字符。
思路：和上一题唯一区别是除了删除还可以添加和修改字符串，dp[i,j]的含义还是从下标0到以word1[i]和word2[j]结尾的两个字符串想要相同要操作的最小步数。其实添加word1和删除word2是一个效果，而修改操作会衍生出另一个递推公式：dp[i, j] = dp[i - 1, j - 1] + 1。
递推公式：
        for(int i = 1; i <= len1; i++){
            for(int j = 1; j <= len2; j++){
                if(word1[i - 1] == word2[j - 1]){
                    dp[i, j] = dp[i - 1, j - 1];
                }
                else{
                    dp[i, j] = Math.Min(dp[i - 1, j], Math.Min(dp[i, j - 1], dp[i - 1, j - 1])) + 1;
                }
            }
        }
与上一题相同的初始化：
        for(int i = 0; i <= len1; i++){
            dp[i, 0] = i;
        }
        for(int j = 1; j <= len2; j++){
            dp[0, j] = j;
        }

25.经典题目——回文子串(中等)：给你一个字符串 s ，请你统计并返回这个字符串中 回文子串 的数目。子串要求是连续的。
思路：如果用一维dp数组很难推导出递推公式，所以使用二维dp数组，dp[i, j]含义是以s[i]为起点，s[j]为终点的字符串是否是回文字符串，在遍历的过程中记录回文串的数量。
递推公式：
        for(int i = len - 1; i >= 0; i--)
        {
            for (int j = i; j < len; j++)
            {
                if (s[i] == s[j])
                {
                    if(i == j || i + 1 == j)
                    {
                        dp[i, j] = true;
                    }
                    else
                    {
                        dp[i, j] = dp[i + 1, j - 1];
                    }
                    nums = dp[i, j] == true ? nums + 1 : nums;
                }
            }
        }
遍历顺序：由于dp[i, j]取决于dp[i + 1, j - 1];，所以采取从下到上，从左到右的遍历顺序。

26.最长回文子序列(中等)：给你一个字符串 s ，找出其中最长的回文子序列，并返回该序列的长度。子序列不用是连续的。
思路：dp[i, j]含义是从s[i]到s[j]范围内最长的回文子序列。
递推公式：
        for(int i = len - 1; i >= 0; i--)
        {
            for(int j = i; j < len; j++)
            {
                if (s[i] == s[j])
                {
                    if(j == i)
                    {
                        dp[i, j] = 1;
                    }
                    else if(i + 1 == j)
                    {
                        dp[i, j] = 2;
                    }
                    else
                    {
                        dp[i, j] = dp[i + 1, j - 1] + 2;
                    }
                }
                else
                {
                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);
                }
            }
        }

