C++标准用语
class Son{
}			//类的声明
Son s1;		//类的实例化(调用了构造函数)
Son* s2;		//指针声明(并未赋值和调用构造函数
Father f1 = Son();		//将子类对象赋值给父类对象
int* a = new int(1); cout << *a;	//解引用

明确四个存储区：全局区(data area)、代码区(code area)、栈区、堆区。

指针的值是一个地址，而不是对象。
所以赋值的时候要用：
int a = 10;
int* b = &a;

只有静态成员，全局变量和全局常量放在全局区。

分辨常量指针和指针常量：从左向右读。
int a = 1;
int* const b = &a;
int const *c = &a;
b是一个const pointer，指针常量，这个指针的指向不能变(即指针存的地址不能变)。
c是一个pointer to const，常量指针，指向常量的指针(指针常量，最好不要用这个名字，容易混淆)，这个指针指向的对象的值不能变。
理解的时候从右向左理解，* const意思是const的pointer，const *的意思是pointer to const。
注意：只有常量指针(指向常量的指针)才能指向一个常量
例如：
const int a = 1;
int const *b = &a;//正确
int * c = &a;//错误

C++中类可以创建在栈上或创建在堆上，唯一的区别是 是否使用new！
Student stu = Student();//这是唯一的标准写法！创建在栈上。
Student stu;		//这个写法只是声明，没有实例化！
Student stu();		//缩略写法
Student stu(c, 15, 92.5f);
Student* pstu = new Student();			//创建在堆上
Student* pstu = new Student(c, 15, 92.5f);	//创建在堆上
注意：
创建在堆上的类对象new的返回值是一个指针，必须要用指针来接收这个值。同时这意味着存在堆上的类要用指针才能调用，指针调用一个类的的成员要用->。
类和结构体声明后必须实例化，调用构造函数后才能使用。
C#的结构体的创建有使用new和不用new两种方式(使用和不使用构造函数的区别)，不管哪种方式，在成员变量被全部初始化前都不能调用成员函数。

Student* pstu = new Student;等于Student* pstu = new Student();
创建在栈上的类对象的赋值操作是值拷贝，改变其中一个类的值另一个类不会改变。

不同于C#,C#的类只能创建在堆上，必须要用new，并且()不能省略。

宏定义只做文本替换而不做类型检查，容易导致运算优先级的问题和类型错误的问题：
// 内联函数
inline int add(int x) {
    return x + 1;
}
// 预处理宏
#define SQUARE(x) x + 1
int main(){
	int b = 2;
	int result_inline = Square(b) * Square(b); 
	int result_macro = SQUARE(b) * SQUARE(b);   // 运算优先级导致错误
}

函数的调用过程：跳转到函数体中-把函数上下文(一个寄存器)入栈-执行函数体-把函数上下文(同一个寄存器)出栈-返回调用点。
内联函数的优化：把函数嵌入到调用它的地方，不再跳转函数体，不再执行入栈出栈操作。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2023/12/29
与C#不同，C++使用int arr[3] = {1,2,3}会在栈上创建数组，而C#无论如何都只会在堆上创建数组。
C++用int arr[3] = {1,2,3}的方式创建的是静态数组，长度参数只能传常数，而常数必须在声明时赋值，所以输入的值无法赋值给常数，也就不能通过输入值来创建长度为n的静态数组。

delete在什么情况使用：
1.在一个方法中如果用new创建了对象，那么在方法结束前要把它手动delete掉，不然就会内存泄漏。
2.如果一个指针本来指向一个对象，那么当指针指向另一个新对象的时候要先把旧的对象delete掉。
3.在一个方法中如果用new创建了对象，那么除了在方法结束前要把它手动delete掉之外，还要看这个对象内部是否还有指针，如果对象内部还有个动态数组，那么要在类的析构函数中释放这个动态数组。
注意：delete数组要用 delete[] arr。

相比C#，C++可以把类方法的[实现]写在类外，只需要在前面加上作用域，但是记得要先在类中声明：
class Student {
public:
 Student();
};
Student::Student() {
    ...
}
而C#不支持方法的声明和实现分离。

引用相当于给一个变量取别名。本质是一个指针常量，被编译器特殊处理，可以直接给这个指针赋值而不是赋地址。
int a = 10;
int& b = a;  //编译器处理为int * const b = &a;
修改引用的值会直接去修改这个指针指向的对象的值，而不是指针的指向
int c = 20;
b = c; //编译器处理为*b = c;
例如：
	int a = 1;
	int b = 2;
	int& c = a;
	c = b;
	cout << a;	//输出2
c = b并不会修改引用c的指向(所以不会报错)，而是被翻译为了*c = b;也就是直接把a的值改变为b了。

普通指针和引用无法被常量赋值，只有常量指针才能指向常量。

拷贝构造函数是一种特殊的构造函数，与一般构造函数的唯一区别就是拷贝构造函数传的参数是(const Student& stu)，即一个被const修饰的该类实例的引用。
至于为什么要加const，一是因为传来的参数是用来赋值的，防止修改原始参数，二是因为使用const的话可以接收const参数和非const的实参，而不用的话实参就只能传非const实参(因为作为一个指针，只能指向非常量)。
至于为什么是引用，因为如果是对象，那么形参复制实参时会递归地调用拷贝构造函数(而创建引用并指向一个变量并不会调用拷贝构造函数构造一个新对象)。

类实例被创建时会带有默认的拷贝构造函数，这个默认的拷贝构造函数会执行浅拷贝，也就是把栈中成员的值进行一次拷贝。

当类的数据成员中没有指针类型的变量时，用一个对象给另一个对象赋值没有问题。
但是一旦类的数据成员含有指针变量，那么直接对这两个对象进行赋值操作之后，这两个对象的指针都将指向同一块内存。这时，一旦其中一个对象生存期结束，释放该内存，那么另一个对象的指针就变成了野指针。
这种情况下非指针类型的成员变量被正常拷贝，而指针类型会被共享，所以在类成员中存在指针时必须使用深拷贝，自己实现拷贝构造函数。
注意：Student* s = &s1;不叫拷贝，叫赋值，而且是指针的赋值。

C#中不再提供默认的拷贝构造函数，当自己有需求的时候可以写类似的函数。

this是一个指针，指向被调用的成员函数所属的对象。

函数中类对象以值的形式返回，返回的是一个对象的拷贝，而不是那个对象本身。

常量引用一般用在形参中防止误操作。

类的初始化方式之一 —— 初始化列表：
Student::Student(int id, int age):id(id),m_age(22),name("chen") {
    ...
}
C#没有初始化列表，但是有初始化器。

vector容器：与C#的List类似
1.创建时是泛型；同时为了避免与方法混淆，当没有参数时要省略掉括号；初始化有传统初始化和统一初始化两种方式，传统就是 传参数 不用初始化器，统一就是 不传参数 用初始化器
vector<int> vec1;	//是vec1()的缩写，已经调用默认构造函数
vector<int> vec1();	//错误写法！为了避免与函数声明混淆，要用上一条的写法
vector<int> vec2(5);	//传统初始化,长度是5
vector<int> vec2(vec1);	//传统初始化，调用拷贝构造函数
vector<int> vec3{1,2,3};//统一初始化
C#的List可以在有参数的同时使用初始化器。
2.vector的方法(基本都是小写)
size()获取长度，capacity()获取容量,push_back(int item)插入最后一个位置，pop_back()从最后一个位置删除。
front()获取第一个数，back()获取最后一个数。
begin()获取一个vector::iterator类型的指向第一个数迭代器，end()获取一个vector::iterator类型的指向最后一个数的下一个位置的迭代器，迭代器可以用++指向下一个位置，也可以用*来取值。
insert(vector::iterator  iterator, int  item)在迭代器位置插入item值。eraser(vector::iterator  iterator, int  item)在迭代器位置删除item值。
clear()删除所有元素。
resize(int num)设置大小，C#中不能设置大小。reverse(int num)设置容量，C#中直接用capacity = xxx来设置容量。
a.swap(b)交换两个容器的值。还有一个作用是当一个容器vec容量很大但是被resize()一个小值导致大小很小时，可以用vector<int>(vec).swap(vec);来把容量设置得和大小相同。

当父类的方法不是虚方法时，子类中的同名方法不会干扰父类中的方法。
class Base{
public:
	 void printError(){  //使用virtual关键字声明函数，将其变为虚函数，即可使用多态
	 cout << "基类方法!" << endl;
	 };
};
//派生类
class Derived : public Base{
public:
	 void printError(){
		cout << "派生类方法!" << endl;
	}
};
void test()
{	
	Base *ex = new Derived(); //静态联编导致子类对象调用基类方法，而不是子类方法
	ex->printError(); //输出基类方法！
}
而当父类方法前添加virtual关键字的话，子类中的同名方法会重写父类的方法，就能使用多态。

当把一个派生类实例赋给一个基类对象时（并不是使用父类指针或引用接收子类对象），会发生对象切片(object slicing)，只保留父类的属性和方法，即使使用了virtual关键字也会导致调用的方法变为基类方法。
void test()
{	
	Base e = Derived(); //对象切片导致子类对象调用基类方法，而不是子类方法
	ex.printError(); //输出基类方法！
}

多态分为静态多态和动态多态。
静态多态也叫编译多态，由函数重载实现。动态多态也叫运行多态，由函数重写实现。
多态实现的条件：
1.父类方法有virtual关键字，子类中有同名方法去重写(C++中不需要override关键字)
2.用父类的指针(或引用)指向子类对象，调用子类重写的虚函数

多态的含义：不同类型的对象用相同的接口完成不同的功能。
多态的目的：接口复用。
例如一个WeaponAttack(const Weapon& weapon)方法传入一个武器基类，这个武器基类被子类重写Attack方法来实现多态，在其中调用weapon.Attack()就能实现不同武器通过一个WeaponAttack接口完成不同的攻击功能。
反之如果不使用多态，那么每多一种武器就要在源文件中多定义一种攻击方法。

C#中的多态也是如此实现的。

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2023/12/30
子类调用父类的方法(即使子类重写了父类方法也可以调用)：
1.在类方法中：
    void Func() {
        Father::Func();
        cout << "son";
    }
2.用子类实例调用：
    Son son = Son();
    son.Father::Func();
类比C#只能在类方法中使用base.Func()调用父类方法

函数指针：return_type (*pointer_name)(argument_type1, argument_type2, ...);
//初始化：
void (*fptr)(int， int) = Func;   //方法本身就是一个地址，可以直接赋值给指针，更推荐
或
void (*fptr)(int， int) = &Func; 
或
void (*fptr)(int， int)；
fptr = Func;
//调用
fptr(1);	//隐式调用，不需要解引用，更推荐
(*fptr)(1);	//显示调用
注意：*pointer_name周围的括号是一定不能少的，不然会和函数声明混淆。

当想让一个函数作为方法的参数传入时，可以用函数名也可以用函数指针，两者完全等效(C++中允许函数作为一个参数传入)
void Func2(void func(int i)) {
    cout<< "函数"<< endl;
}
void Func3(void (*fptr)(int i)) {
    cout<< "函数指针"<< endl;
}
甚至可以给Func2传一个函数指针，给Func3传一个函数名，都可以运行。
注意：这是因为单独的函数(非调用)会被解释为函数指针，这也是为什么cout << &Func << endl << Func << endl;输出的值相同。

指针作为函数的参数时，形参是一个临时创建的局部指针，指向实参指针。

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2024/1/1
编译器给类自动生成的四个函数：默认构造函数、拷贝构造函数、赋值函数、析构函数。(C#中应该只有默认构造函数)

结构体和类都可以选择实例化在堆上或在栈上，他们都可以继承、实现函数、实现多态，作用几乎相同。(C#中结构体是值类型，只能存在栈中，不支持继承，成员默认访问权限是private)
唯二的不同：
class成员的默认访问级别是private，struct成员的默认访问级别是public。
class继承的默认方式是private，struct继承的默认方式是public。

public继承：父类中各成员不变。(也是C#的继承方式)
protected继承：父类中public成员对于子类变成protected。
private继承：父类中public、protected成员对于子类变成private。

结构体是轻量级的类，设计的默认权限和默认继承权限都是public，在存储的数据不多，函数不复杂时可以使用结构体。

使用初始化列表的情况：
1.类成员有常量(这种情况要用初始化列表或在定义时直接赋值)
常量有全局常量、类成员常量、局部常量三种。除了类成员常量，其他两种都必须要在定义的时候初始化。而类成员常量除了可以在定义时初始化也可以用初始化列表进行初始化，但是不能在构造函数中赋值。初始化和赋值是不同的，构造函数中是在赋值而不是在初始化。
2.类成员有引用(这种情况要用初始化列表或在定义时直接赋值)
引用成员需要在定义的时候初始化或者在初始化列表中初始化，而不能在构造函数中初始化。
3.在子类的构造函数中想要调用父类特定的构造函数而不是默认构造函数
Son():Father(1){
}
初始化列表使用样例：
class MyClass
{
private:
	const int year;
	const int month;
	const int day;
public:
	MyClass() :
		year(1),
		month(2),
		day(3)
	{}
};
在C#中使用base而不用父类名。C#中常量定义后必须被赋初始值。

引用是一个指针常量，指向一个对象后不再改变指向。带有常量的特性：必须在声明时就赋初始值(类成员中的常量是例外，可以在初始化列表中赋初始值)。

auto关键字：根据右边的值确定左边的类型，类似var。
必须赋有初始值。只能出现在局部变量和全局变量中。
auto i = 1;

decltype关键字：是declaration type(声明类型)的缩写。可以通过括号中表达式的类型返回相应的数据类型。
如果括号中的表达式被第二层括号括起来，则返回一个该类型的引用(引用必须要赋初始值)。
int a = 1;
decltype(i) b = 2;
decltype(i)* aptr = new int(1);
decltype((i)) aref = new int(2);

范围for循环：类似foreach()，只能用于可以求长度的数据结构，例如vector、内置数组等，而用new创建的动态数组无法获取其长度信息，就不能用范围for循环遍历
for(auto i : arr){
    ...
}

C++也有lambda表达式，用来写匿名函数(C#中也是)：
语法如下：
[捕获列表](参数) -> 返回值类型 {
    // 函数体
}
例子：
auto sum = [](int a, int b)-> int {
    return a + b;
};
捕获列表传的是外部的变量，给变量前加&表示捕获引用。若列表中只有一个"="符号，表示按值捕获所有外部变量，若只有一个符号"&"表示按引用捕获所有外部变量。
int x = 42, y = 24;
auto lambda = [x, &y] {
    std::cout << x << ", " << y << std::endl;
};

C++中创建对象和创建对象指针的区别：
类对象(结构体也一样)在声明后，会在栈中直接创建一个类对象，所有的成员变量都会被创建并且是未赋值状态(值为-858993460)，但是类本身已经创建，可以正常使用，调用函数等等。
而类对象的指针在声明后，只会在栈中创建该类的指针，而没有在堆中创建相应的类对象，所以此时如果调用这个指针的成员变量或者方法是会报错"未初始化"的，只有在调用构造函数返回一个指针赋值给栈中指针后才能通过对象的指针访问这个类的成员。
(C#中声明的类只能是一个指针，所以C#的类声明后不能访问，还要初始化后才能访问)

当不使用多态时，子类对象的创建的顺序是：父类构造函数-子类构造函数-子类析构函数-父类析构函数。
当使用多态的时候，记得把父类的析构函数设置为虚函数，这样的话在delete父类指针时会先调用子类的析构函数，再调用父类的析构函数。不然只会调用父类的析构函数。

void* 是可以指向任意类型的指针。其他类型指针可以直接赋值给void*类型指针，而void*类型的指针想赋值给其他类型的指针需要强制转换。
void*类型指针只有强制转化为一个具体类型指针后才能用*访问其内存空间。

构造函数可以是虚函数吗？：不能。
因为虚函数实现所依赖的虚函数表指针要靠构造函数来创建，如果构造函数还没运行，就没有虚函数表指针，也就无法调用虚函数。
静态函数也不能是虚函数。因为静态函数在编译时确定，虚函数在运行时才能确定。

32位操作系统指针占4字节，64位操作系统指针占8字节

空类占1字节的原因：让空类的实例化之间相互区分。

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2024/1/6
C++STL(standard template library)标准模版库：包含容器、算法、迭代器。
容器：
string(注意了，string也属于STL)对标C#的string：
s.find('a')，查找字符，对标IndexOf('a')
s.compare(s2)，比较阿斯克码值，对标CompareTo()
s.insert("a")，只能插字符串而不能插字符,对标Insert()
s.erase(int pos, int num = 1)，删除pos位置的字符,对标Remove(int pos)
s.substr(int pos, int num = 1)，截取字符串，对标Substring(int pos, int num = 1)
s.push_back("a")，插入字符a
s.begin()/end()获取第一个字符/最后一个字符之后的迭代器
s.replace()有很多重载，比较有用的是(start, off, char*)，修改字符串

vector<>：向量，单端数组，内部由一个数组实现
其迭代器是随机访问迭代器
对标C#中的List<>
vector在栈上创建vector对象，内部存有指向堆中数组元素的指针和数组元素的大小。
初始化：
       vector<Person> vec1 = {Person(1),Person(2)};	//vector在C++11后推荐直接用大括号(初始化列表)初始化
       vector<int> vec(arr, arr + size);	//使用数组的指针模拟迭代器来初始化
常用方法：
v.capacity()，l.Capacity还能用来修改Capacity，对应l.Capacity，获取容量
v.reserve(int num)，设置容量大小，对应l.Capacity直接修改
v.size()，获取容器元素个数，对应l.Count
v.resize()，修改容器长度，C#中无对应方法
v.push_back(int i)，尾部添加元素，对应Add()
v.pop_back()，尾部删除元素，无对应
v.begin()，返回指向第一个元素的迭代器，无对应
v.end()，无对应，返回指向最后一个元素的下一个位置的迭代器1
v.front()，返回第一个元素，对应Fitst()
v.back()，返回最后一个元素，对应Last()
v.insert(iterator i, int val)，在一个位置插入一个元素，C++只能用迭代器不能用序号，对应Insert(int pos, int val)
v.insert(iterator i, iterator begin, iterator end)， 在一个位置插入一段元素，对应l.InsertRange(int pos, IEnumerable val)
v.erase(iterator i)，删除一个位置上的元素，对应l.RemoveAt(int pos)
v.erase(iterator begin, iterator end)，删除一段元素，对应l.RemoveRange(int pos, int num)
v.clear()，清除所有元素，对应l.Clear()
find(v.begin(),v.end(),int value)，是STL的方法，寻找某值第一次出现的位置，返回其迭代器，找不到则返回v.end()
sort(v.begin(), v.end())，是STL的方法，从小到大排序，有另一个重载类型可以在第三个参数传入函数以指定排序方式

如果vector中存的是自定义类型，则需要重载==运算符以使用find：
bool comparePersons(const Person& a, const Person& b) {
    return a.name == b.name && a.age == b.age;
}
int main(){
      vector<Person> people = { {"Alice", 30}, {"Bob", 25}, {"Charlie", 35} };
      auto it = find(people.begin(), people.end(), Person("Bob", 25));
}
如果想要使用sort有两种方式：
1.在类中重载<运算符
    bool operator<(const Person& other) const {
        return age < other.age; // 根据年龄排序
    }
2.在类外自定义比较函数
bool compareByName(const Person& a, const Person& b) {
    return a.name < b.name; // 根据名字排序
}

用“交换技巧”来修整vector过剩空间/内存：
vector<int> tmp = v;  
 v.swap(tmp);

C#的额外方法：
l.IndexOf(int item)，找到第一个item出现的位置并返回位置，lambda表达式版本：FindIndex();
l.Remove(int item)，找到一个元素第一次出现的位置并删除，lambda表达式版本：RemoveAll();
l.RemoveAll(Predicate<T> match)，删除所有满足条件的元素
l.GetRange(int beginIndex, int endIndex)，返回一个子列表
还有很多很多...

deque<>:双端数组，内部有一个地图(map)和多个内存块组成。地图中存有各内存块地址(即一个地址数组)，每块内存块中包含一段数组，块与块之间不连续，内存块的大小是相同的。
其迭代器是随机访问迭代器
优点：头插、头删效率高于vector
缺点：由于段与段之间不连续，访问效率效率低于vector
push_front(int val)，头插
push_back(int val)，尾插
pop_front()，头删
pop_back()，尾删
其他方法用法和vector容器几乎相同
deque没有capacity和他的设置，因为它和list一样设计的初衷就是可以无限增长(内存不连续)
双端数组可以看做是vector的兄弟，差别不大，在C#中没有对应的类型

stack<>与queue<>：栈与队列，内部由数组实现，不允许用大括号初始化
栈和队列都只有几个接口：
push(int val)，入栈/队列，对应C#栈的Push(int val)和队列的Enqueue(int val)
pop()，出栈/队列，对应C#栈的Pop()和队列的Dequeue()
size()，获取大小，对应Count属性
其中栈的特殊接口：
top()，返回栈顶元素，对应Peek()
队列的特殊接口：
front()，返回队列头的元素，对应Peek()
back()，返回队列尾的元素，无对应，但是Linq扩展方法中有Last()方法
两者都没有获取迭代器的接口

list：双向循环链表，由节点构成。节点由数据域和指针域构成，指针域有两个指针，一个是指向前一个节点的指针，另一个是指向后一个节点的指针。
优点：插入删除速度快
缺点：遍历速度慢，占用空间大
list的迭代器是双向迭代器，其迭代器只能前移或者后移(迭代器只支持++和--操作，而不支持+和-，即使+1也不行，也不能直接用[]访问元素
list由于是链表，插入和删除不会造成原有的迭代器失效，而vector会
从C++11开始允许使用大括号初始化list了
赋值：=赋值、assign(iterator begin, iterator end)、assign(int num, int val)
接口：
size()，返回大小
empty()，返回是否为空
resize(int val)，设置大小
push_front()，插入头部
push_back()，插入尾部
pop_front()，删除头部
pop_back()，删除尾部
insert(iterator it, int val)，插入元素
insert(iterator pos, iterator begin, iterator end)，插入一段元素
clear()，清空容器
erase(iterator it)，删除元素
erase(iterator begin, iterator end)，删除一段元素
remove(int val)，删除所有等于val的数据
front()，返回第一个元素
back()，返回最后一个元素
begin()，返回指向第一个元素的迭代器
end()，返回指向最后一个元素后一个位置的迭代器
reverse()，翻转链表
l.sort()，排序，因为不支持随机访问迭代器的容器不能用标准快排算法(即不能用sort(li.begin(), li.end()))，所以list自带了一个sort成员方法
l.sort(comparor)，使用特定的排序算法(例如从大到小)，comparor是自己实现的排序方法，返回值是bool，和C#返回值是int不同
find(l.begin(),l.end(),int value)，是STL的方法，寻找某值第一次出现的位置，返回其迭代器，找不到则返回v.end()
对于自定义类型的list，排序一定要指定排序算法

vector和list是最容易被使用的两个代表性容器
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2024/1/6
set和map作为关联式容器，提供了自己的find方法
set和map中的元素进入时自动排序，故存储自定义类型时必须要在模板的第二个参数指定比较的仿函数或重载比较运算符

set/multiset/unordered_set/unordered_multiset：元素在进入时会被自动排序。set对应C#的SortedSet。
本质：关联式容器，内部存的是键值对pair，底层由红黑树实现，不能自由访问
set不允许容器有重复的元素（插入元素时会检查，有重复元素就取消操作），multiset允许
构造函数：默认构造(无参数)、拷贝构造
可以使用大括号初始化
接口：
s.size()
s.empty()
s.begin()
s.end()
s.insert(int val)：
对于set:方法返回一个对组pair<set<int>::iterator, bool>，检查pair的second属性可以判断插入是否成功，无论成功与否都会返回容器中指向这个数字的迭代器
对于multiset：插入必定成功，不用获取返回值
s.erase(iterator pos)
s.erase(iterator begin, iterator end)
s.erase(int val)
s.find(int val)，元素存在则返回指向该元素的迭代器，不存在就返回end()，可以通过检查是否==s.end()来判断元素是否在set中。
		//注意，此类关联式容器有自己的find方法，
s.count(int val)，统计元素的个数，在set中只能为0或1，在multiset中有更多
可以通过在模版中传入第二个参数来实现自定义排序规则：通过传入仿函数参数实现
class Greater {
public:
    bool operator()(int x, int y){
        return x > y;//降序排序
    }
};
int main(){
    set<int, Greater> ss;
}
其他STL模板存储自定义类型时，要重载==
当模版的参数是自定义类型时，必须传入第二个参数指定排序规则，因为编译器不知道怎么排序。

仿函数：通过重载()运算符模拟函数行为的类。目的是有些模版要求传入的必须是类(如set<T1, T2>)，于是创建一个类来实现类似函数的功能。
是STL中的重要概念之一，可以用于实现自定义的排序、比较。
例子：
class Greater
{
public:
    bool operator()(int a, int b) 
    {
        return a > b; // 降序排序
    }
};
int main(){
    Greater cmp;
    vector<int> vec{3,2,1};
    sort(vec.begin(), vec.end(), cmp);//这种情况也可以不用仿函数，直接写一个排序函数
    set<int, Greater> ss;
}

对组：pair<T1, T2>，是一个结构体，将两个值存在一起。使用first属性获取第一个值，用second属性获取第二个值。在有两个返回值的时候可以使用。
例子：pair<int, int> p(1, 2);

map/multimap/unordered_map/unordered_multimap，字典，所有元素都是pair，会把内部的pair根据key值排序，使用迭代器访问的时候可以看出这一点
本质：关联式容器，底层使用红黑树实现
优点：快速根据key值找到value值，高效率
map不允许重复的key值，multimap允许有重复的key值
构造函数：默认构造，拷贝构造
初始化：map<int, int> m{ {1,2},{3,4},{5,6} };
接口：
size()
empty()
begin()
end()
m.insert(1, 2);	//插入已存在的键值对不会覆盖原有的值
m[1] = 2;		//用=赋值改变会覆盖原有的值
erase(iterator pos)
erase(iterator begin, iterator end)
erase(T key)	//根据key值删除
m[4] = 40，相当于插入了一个键值对pair<int, int>(4, 40)，不建议使用
find(key)，寻找key是否存在，存在返回指向的迭代器，不存在返回end()
count(key)，查看key的数量，map中为0或1，multimap不是
使用begin和end得到的是指向pair的迭代器，获取key值用ite->first，获取值用Ite->second
使用仿函数可以修改排序的规则，使用方法和set类似
插入已存在的键值对不会覆盖原有的值，
key的类型是自定义类型时，必须要传入排序规则参数，不然就会报错


容器总结：9个容器
vector，向量，用数组实现，对标List，存自定义类型时要重载==运算符和<运算符以使用std::find和std::sort方法(这一点所有容器都相同)
deque，双端队列，双端版本的vector，用多段数组实现，以实现快速头插/头删
vector和deque类型插入和删除会导致原有的迭代器失效，所以插入和删除元素时要更新迭代器为insert、erase方法的返回值
    auto it = myVector.begin();
    while (it != myVector.end()) {
        if (*it == 1) {
            it = myVector.erase(it); // 删除当前元素，并返回下一个元素的迭代器
        } else {
            ++it; // 继续遍历下一个元素
        }
    }
list，链表，用链表实现,不再允许用索引器访问，。对标LinkedList
stack，不能使用初始化列表，不是容器，基于deque实现
queue，不能使用初始化列表，不是容器，基于deque实现
set/multiset，集合，用红黑树实现，set对应SortedSet
map/multimap，字典，用红黑树实现，map对应SortedDictionary
1.list由于不支持随机访问故提供了自己的sort方法用于排序；set和map也不支持随机访问，但他们本身就是排好序的。
2.set和map中的元素进入时自动排序，故存储自定义类型时必须要在模板的第二个参数指定比较的仿函数或重载比较运算符
3.set和map由于分散的存储方式故拥有自己的find方法
4.vector和deque容器有迭代器失效风险，注意在插入和删除后更新迭代器为insert、erase的返回值
5.std::partition(begin, end, ChargeFunc) 是一个 STL 算法，用于根据给定的谓词函数将范围内的元素重新排列，使得满足谓词函数的元素位于范围的前半部分，不满足谓词函数的元素位于范围的后半部分。
返回值是第一个不满足谓词的迭代器
6.std::remove(begin ,end ,2)/std::remove_if(begin ,end ChargeFunc) 是一个STL算法，用于将所有满足条件的元素放置到容器末尾，但是没有真正将其删除，一般与erase配合使用，
返回值是第一个满足谓词的迭代器，用法和partition几乎是相反的
    vector<int> vec = { 1, 2, 3, 4, 5, 2, 2, 6 };
    vec.erase(remove(vec.begin(), vec.end(), 2), vec.end());
仅用于vector、deque这样的顺序容器！
7.只有stack、queue不能使用初始化列表，它俩不是容器


菱形继承：两个子类继承自一个父类，同时又有一个孙子类同时继承这两个子类。
  A
 / \
B   C
 \ /
  D
后果：导致孙子类中变量具有二义性。d._a报错，不知道是从B来的还是从C来的。即使没有A，当B和C成员同名时也有这个问题。
解决方式：
1.用访问限定修饰符指明继承自的父类：
d.B::_a = 3;
d.C::_a = 4;
2.让类B/C虚拟继承A
虚拟继承能让B/C获取同一个A的成员
原理：虚拟继承会在B/C中插入虚基类表指针，指向虚基类表，虚基类表存偏移量，虚基类表指针的地址+偏移量=虚继承的父类成员的地址。
当一个类有多个虚拟继承的父类，虚基类表就会增加。
虚基类表和因虚函数产生的虚函数表不是一个东西，一个指向偏移量，一个直接指向虚函数的地址。
虚基类表指针和虚函数表指针也不是一个东西，一个指向虚基类表，一个指向虚函数表。

shared_ptr底层实现：一个指向对象的指针和一个int类型指针(计数器)。

循环引用问题如何解决：通常只有shared_ptr会引起循环引用问题。解决方法是把其中一个shared_ptr换成weak_ptr。

为什么链表的节点的指向下一个节点的物体是指针？：因为在结构体中不能有未完成的类型，所以在创建(节点)结构体类型时内部不能有未完成的这个(节点)类型，必须用指针指向。

类的静态成员是被该类共享的，为了防止静态成员在类初始化时被重复赋值改变，静态成员只能并且必须要在类外进行初始化：
class CC {
public:
	static int b;
};
int CC::b = 3;//必须在全局域中初始化而不能在某个方法中(例如main方法)，并且注意要有前面的类型声明
初始化后可以用CC::b的形式获取，也可以直接用类的实例cc.b获取。
而在C#中静态成员可以随时随地被赋值。并且只能被用CC.b的方式获取。

类的常量成员属于类实例自身，只能在初始化时或者在初始化列表中赋值，甚至不能在构造函数中赋值。
而在C#中常量成员默认是静态的常量，是属于类的，必须在声明时初始化。

Person p2 = p1;这样的使用调用的是拷贝构造函数而不是重载的赋值运算符。

拷贝构造函数写法：
	Person(const Person& person) {
		cout << "拷贝构造！";
		this->i = person.i;
	}
=运算符重载写法：
	Person& operator=(const Person& person) {
		cout << "赋值运算符重载！";
		return *this;
	}
	

STL库中的容器都可以用.size()方法获取长度。
string来自std库，也可以用.size()获取长度。
数组arr[]类型可以用sizeof(arr)/sizeof(arr[0])获取长度。
一个指向数组首元素的指针无法获取长度，因为它已经丢失了数组的信息只知道指向了一个元素。

delete this;？

在C++中，通常将程序的代码分为头文件（Header Files）和源文件（Source Files）。这两者在功能和用途上有明显的区别：
头文件（Header Files）：
文件扩展名：通常以 .h 或 .hpp 结尾。
包含声明：包含了类、函数、变量的声明，但不包含其实现。
用途：主要用于提供接口，声明类、函数、变量的结构和签名，使得其他源文件可以使用这些声明而无需关心具体实现细节。
编译速度：由于只包含了声明，而不包含实现，因此编译速度相对较快。
源文件（Source Files）：
文件扩展名：通常以 .cpp 或 .cxx 结尾。
包含定义：包含了类、函数、变量的实际实现。
用途：实现头文件中声明的具体功能，定义类的成员函数，给出函数和变量的实际代码。
编译时连接：在编译时，编译器会将所有的源文件编译成目标文件，然后链接在一起形成最终的可执行文件。
编译速度：由于包含了实现，编译速度相对较慢。
关系和作用：
分离接口和实现：头文件提供了接口的声明，源文件提供了接口的实现。
模块化设计：通过头文件和源文件的结合使用，可以实现模块化的设计，提高代码的可维护性和可读性。
避免循环依赖：使用头文件的前置声明可以避免循环依赖问题，确保程序结构清晰。
头文件只是用来声明的，不参与编译，只是把里面的代码给复制到这个源文件里来。

static能否修饰非成员变量的变量？能。
普通全局变量，可以被其他文件用extern声明该变量，或是直接引入该文件来共享。
静态全局变量，是指在全局变量之前添加 static关键字，其特点和全局变量类似，除了下面一点：静态全局变量只能由本文件进行访问，而无法被包含本文件的其他文件访问。

根据C++标准的规定，一个变量声明必须同时满足两个条件，否则就是定义：  
(1)声明必须使用extern关键字；
(2)不能给变量赋初值    
不管变量还是函数先声明 或者直接定义才能使用，声明能声明n次，同一个作用域里面，一个变量定义只能定义一次。
大多数时候都是定义而不是声明。

一个全局变量的作用域默认是整个程序， 加了static 或者加了 const 则是这个源文件。
如果在多个源文件 包含同一个名字的 全局变量的 定义，就会引起重定义。

若要想在多个文件共用一个全局变量，我们只需在一个头文件里 声明（注意是声明）这个变量 ： extern int i；
然后在 其中一个源文件 只能是一个（通常就是头文件的同名源文件）里面 定义这个变量   int i =1；
注意不能用 i =1；  要用 int i =1；

总结extern的作用：想要访问一个全局变量(方法)时使用extern声明该全局变量(方法)来获取。

数组也可以选择在栈还是在堆上生成，int arr[] = { 1,2,3 }是生成在栈上的。

在子类中调用父类方法的同名方法：
class Son: public Father {
public:
	void Func() {	//同名方法	
	}
	void Test(){
		Father::Func()
	}
};
即使是被重写的virtual方法也可以被调用。
而C#中使用base.xxx()的方法向上寻找匹配的方法。

在子类中调用父类有参构造函数的方法：
class Son : public Father {
public:
	Son(int a, int b) :Father(a) {
		//...
	}
};
而在C#中使用base(xxx)的方法调用：
class Son: Father
{
    public Son(int a):base(a)
    {
	//...
    }
}

C++的重写不需要override关键字，非要加的话override关键字要写在方法后面：
	 void  Func() override {		
		cout << "son";
	 }
这是很奇怪的。


C++类中的this是一个指向当前对象的指针，所以赋值要用this->c = 1;
而C#中的this就是当前对象，赋值可以直接使用this.c = 1;

用delete this去删除指针指向的资源合法吗？合法，但是要确定：
1.必须保证this是通过new创建的(而不是在栈上创建的，不是new[]创建的)。
2.this被delete后不能再被使用。

new/delete和malloc/free都是用于向堆中申请空间的方法，两者的区别：
	int* a = new int();
	int* b = (int*)malloc(sizeof(int));
1.new/delete是C++的操作符；malloc/free是C的库函数。
2.new会自动计算所需空间的大小(根据new后跟的类型，例如此处的int)；malloc要手动设置所需空间的大小。
3.malloc申请成功后返回一个void*(void类型的指针)，需要强制转化为对应类型的指针；而new直接返回一个对应类型的指针。
4.new失败会抛出异常，malloc失败会返回NULL。
5.new会先调用操作符new(然后调用构造函数)，而操作符是可以被重载的，所以new可以被重载去定义自己的内存分配规则(例如在全局区中分配而不在堆中)。
6.new会先开辟内存空间，然后调用构造函数；malloc只会开辟内存空间。free会先调用析构函数，然后释放空间，free析构的是void*指针。
7.malloc会多分配16字节记录指向空间的信息，包含了长度，所以free一个void*指针知道要释放多少字节。

拷贝构造函数在什么情况下会被调用：
1.使用一个已经创建完毕的对象来初始化一个新对象时：
Student* s1 = new Student("aaa");
Student*  s2 = new Student(*s1);
或
Student s1("aaa");
Student s2(s1);
Student s3 = s1;		//注意了，这样的赋值方式调用的是拷贝构造函数而不是重载的等号运算符。
注意：可以自定义拷贝构造函数以实现深拷贝。
2.在函数参数为类对象时：
void Func(Student s) {
    ...
}
int main(){
    Student* s1 = new Student("aaa");
    Func(*s1);
}
以引用或指针  的方式传参数的话就不会调用拷贝构造函数了。
例如void Func(const MyClass& mc) {
}就不会调用。
3.当函数返回一个类对象时：
Student Func() {
    ...
    return s;
}
int main(){
    Student s = Func();
}
如果没被赋值，仅仅执行函数
int main(){
    Func();
}
也会调用拷贝构造函数。
注意：现在编译器的优化会让情况3不再触发拷贝构造函数。
注意：默认拷贝构造函数和赋值操作都是浅拷贝。
注意：C#已不再提供默认拷贝构造函数

当一个代码块结束时，会释放栈中当前作用域的内存，如果类实例化在了栈上，则类会被自动释放，释放时类会调用它的析构函数。
而如果类实例化在了堆上，因为堆中资源需要手动释放，所以实例化在堆上的类需要用delete手动释放，释放时类会调用它的析构函数
即所有使用new创建的资源都必须要手动释放，类中new创建的资源还需要在类的析构函数中释放。

进程与线程的区别：
进程是资源分配的基本单位，线程是CPU调度的基本单位。
并发性：进程切换效率低，现成切换效率高。
内存：进程拥有独立的虚拟内存空间，线程只独享有一个很小的栈空间，但是能共享进程的空间。
所属关系：线程依附于进程，不能独立存在。一个进程可以开启多个线程。
健壮性：进程拥有独立的运行环境，拥有更高的健壮性。

虚拟内存是什么？每个进程所享有的内存空间就是虚拟内存空间。
32位电脑实际内存空间为4GB，每个进程都享有一个4GB的虚拟内存空间。
4GB中有1GB是内核空间(对进程不可见)，3GB用户空间，内部分为栈区、堆区、静态区、代码区。

虚函数的实现(也是多态的实现)：由虚函数表(属于类)、虚函数表指针(属于类的实例)、函数指针实现。
若一个类有虚函数，则在编译时会产生一个虚函数表，虚函数表是一个静态的函数指针数组，存的是该类的虚函数在代码区的地址(即虚函数表会在运行时存入代码区)。当实例化一个类调用构造函数时，如果类中有虚函数，则产生一个虚函数表指针指向该类的虚函数表(这也是类实例的大小在存在虚函数时增大的原因)。

虚函数存在代码区中和普通函数在一起。虚函数表存在全局区中。虚函数指针存在类的实例中。

多态实现的原理：
1.在编译时，如果父类有虚函数表，则父类和子类都会有自己的虚函数表，如果子类重写了虚函数，则会在虚函数表中用自己重写的函数的位置代替父类虚函数的位置。如果子类自己还有虚函数，则在虚函数表末尾加上自己的虚函数。
2.在执行时(即子类实例化时)，会产生一个虚函数表指针指向该类的虚函数表，而由于虚函数表中父类虚函数在编译时就已经被替换了，就完成了多态。

类的空指针也能调用类的成员方法：
class base {
	int a;
public:
	void fun() {
		cout << "virtaul";
	}
	virtual void fun2() {
		cout << "noraml";
	}
	void  fun3(){
		cout << a;
	}
};
int main() {
	base* b = NULL;
	b->fun();	//正常！
	b->fun2();	//报错！
	b->func3() 	//报错!
}
原因：b->fun()方法调用其实是base::fun(b)。因为类的方法是所有类实例共享的，调用类的方法时隐式地传入了调用类方法的类对象(以区分不同对象的数据，例如此处的a)，而如果方法中不通过this访问类的成员(就算是不通过this直接访问类的成员也不行)，那么this是否为空也就不会影响方法的执行，所以fun方法不会报错，而fun3方法会报错。
fun2是虚方法，要通过对象的虚函数表指针找到虚函数表来调用，但是指针已经为空自然就找不到虚函数表，也就找不到虚函数，报错了。
注意：C#中引用和这里的指针已经不是一个东西了。Father father;声明一个Father类的引用，该引用在被实例化之前都无法调用其中的方法。

C++中的作用域：
同层次之间作用域是封闭的：
int main() 
{
	{
		int a = 1;
	}
	{
		cout << a;	//报错
	}
}
内层作用域能访问外层作用域的变量，也能再次定义外层作用域的变量(覆盖掉外层作用域的变量)，但再次定义的变量只在内层中生效：
int main() 
{
	int a = 1;
	{
		int a = 2;
		cout << a;	//输出2
	}
	cout << a;	//输出1
}
而在C#中，内层与外层作用域不允许出现同名变量：
    static void Main()
    {
        {
            int a = 3;
        }
        int a = 2;		//报错
    }

假如现在一个数据类型很大，比如达到兆级，一般放在哪里？(1兆即一百万，Million，1MB)
答：写入硬盘中，放在内存中的话会消耗大量内存。

内存区域：
栈区(局部变量)：编译器自动分配释放，存放函数的局部变量、函数参数、返回值、返回地址、cpu执行的机器指令等。接近1MB，可自定义大小。
静态区/全局区：存储全局变量和静态变量。接近2GB。
堆区：需要手动 malloc/new 动态分配 ， free/delete 释放。大小即虚拟内存的大小，理论上有16G(取决于电脑物理内存，也可能是4G)。
代码区：存放函数体的二进制代码。

26.不在同一局域网的两台机器，分别只有IP，在客户端发出消息到服务端收到地址，经过哪些协议？
应用层：HTTP/FTP/TELNET/DNS/DHCP
传输层：TCP/UDP
网络层：IP/ICMP/OSPF
链路层：ARP/HDLC/PPP/IEEE 802

27.包到达路由器下的局域网了，拿到的只是一个IP，在局域网下面怎么把IP换成MAC的？

28.ARP协议的流程是什么？

29.socket编程，TCP和UDP在API层面主要有哪些区别？

31.网络多路复用里，什么是IO多路复用？

32.经常说大端小端，网络通信是属于大端还是小端？

35.数据库中要优化查询性能，最常见的方式是什么？

36.数据库索引是干什么用的？

37.索引是通过什么数据结构实现的知道吗？

抽象类：至少含有一个纯虚函数的类，不允许被实例化。
纯虚函数：在函数声明后加“=0”，
class Shapes   //抽象类
{
protected:
    int x, y;
public:
    void setvalue(int d, int w=0){x=d;y=w;}
    virtual void disp()=0;//纯虚函数
};
抽象类不允许被实例化，其子类如果不重写纯虚函数的话其也作为一个抽象类存在，。
而在C#中，一个函数用abstract修饰变为纯虚函数，拥有纯虚函数的类必须用abstract修饰变为抽象类，这样的类也不允许实例化。
其子类如果不重写纯虚函数，就只能在类前加上abstract变为抽象类。

const加在成员函数之后表示在该成员函数是常函数，在其中不允许修改成员变量：
class Father {
public:
	int c = 1;
	void Func() const	//记住是之后而不是之前
	{
		c = 2;	//报错，因为修改了成员变量
	};
};

初始化列表中，先声明的值先被赋值：
class Base {
public:
	int   i;	//声明顺序是先i
	int   j;	//后j
	Base(int  value) : j(value), i(j) 
	{
	}
};
因为i先被声明，所以i会先被赋值，由于此时j是未赋值的，所以i输出为-858993460，即VS中int类型的默认值。
如果i、j声明顺序反转，则i、j都能被正确赋值value。

static修饰一个局部变量：
int func() {
	static a = 0; // 使用static关键字定义静态局部变量，在首次调用时初始化
	a += 1;           // 在每次函数调用时改变值
	return a;
}
int main() {
	cout << func() << endl; // 输出 1（首次调用初始化）
	cout << func() << endl; // 输出 2（每次调用值发生变化）
	return 0;
}
被修饰的局部变量会被存在全局区中，该变量仅在第一次调用该函数时被初始化，之后不再执行初始化语句。
自此static共有三种用法，分别修饰类成员、全局变量、局部变量。

类A中若存在自定义类B类型的成员，则在类A实例化时，在A的构造函数调用前会先调用B的构造函数(如果类B没有无参构造函数则报错)。
如果不想调用，则需要把类B成员改为指向类B的指针。
C#中由于所有类都相当于指针，所以实例化A不会调用类B的构造函数。即使B是一个结构体也不会调用B的构造函数。

在一些不希望存在构造函数的类中，使用以下方法防止编译器自动生成构造函数：
class A {
public:
	A() = delete;
}

字节对齐：
class B {			//B大小为16字节，因为最大是8字节，
private:
	double b;
	int c;
}

空类(结构体)大小为什么至少是一个字节：
类实例化时在堆中开辟大小等于类大小的空间作为对象的存储空间，如果类大小为0就无法开辟空间了。

内联函数：在函数前加上inline，类中的成员方法默认是内联函数。
特点：
内联函数与宏定义类似，直接把函数体的内容复制到函数的调用处，省去了在栈中压入和压出局部变量的消耗，提高了执行效率。
内联函数与宏定义的区别：
1.宏定义不会做语法检查
2.宏定义可能会出现优先级错误
总结：内联函数比宏定义更安全
内联函数只能包含简单的操作，当包含循环、递归、switch等复杂操作时，编译器会自动取消内联。
优点：省去了函数调用的过程提高了执行效率。
缺点：是否内联由编译器决定而不是程序员。
虚函数一般不是内联的，因为内联在编译阶段实现，编译器在编译时不知道应该调用哪段代码。

程序在运行时在虚拟内存中划分出栈、堆、全局、代码区等区域。其中栈和数据结构的栈相反，是从上向下/从高地址到低地址增长。

二叉搜索树：左子树上所有结点的值均小于它的根结点的值，右子树上所有结点的值均大于它的根结点的值。
平衡二叉搜索树(AVL树)：是一种自平衡的二叉搜索树。其平衡的含义是点的两个子树的高度最大差别为1。增加和删除可能需要通过一次或多次树旋转来重新平衡这个树。

红黑树？
红黑树是一种自平衡的二叉搜索树，它通过在插入和删除操作时执行特定的操作来保持树的平衡。红黑树的每个节点都被标记为红色或黑色，并且遵循以下性质：
1.根节点是黑色的。
2.每个叶节点（NIL节点，不带有元素）是黑色的。
3.不能有两个连续的红节点。
4.从任一节点到其每个叶节点的所有简单路径都包含相同数目的黑色节点。
这四个特性决定：其最长路径中结点个数不会超过最短路径结点个数的两倍。

常见数据结构性能：
			插入		删除		查询		随机访问
数组			O(n)		O(n)		O(n)		O(1)
链表			O(n)		O(n)		O(n)		O(n)
红黑树		O(logn)	O(logn)	O(logn)	O(logn)

进程间的通信方式有哪些？

析构函数的作用：类对象被栈自动删除或被delete在堆中手动删除，但是对象可能包含有指针成员，如果不释放指针成员指向的对象就会造成内存泄漏。析构函数就是为了防止类释放不干净而产生的，在对象被删除的时候析构函数会被调用来辅助清除对象。

析构函数被调用时机：总而言之，就是对象被删除时自动调用
1.栈中对象出作用域后被自动删除，析构函数被调用。
2.堆中对象被delete手动删除，析构函数被调用。
3.A类中存B类成员(而不是指针)，当A对象被删除时(不管是被栈自动删除还是被delete在堆中手动删除)，B类的生命周期也会结束，也会调用析构函数。
4.B继承自A，B对象被删除时A的析构函数也会被调用。

智能指针？
智能指针能自动释放堆中内存，防止内存泄漏，有shared_ptr、unique_ptr、weak_ptr三种，来自#include<memory>头文件。智能指针封装的裸指针必须是new出来的对象。
智能指针本身是一个模版类，里面封装了一个指针和一些方法：
explicit修饰的构造函数，防止直接用指针赋值智能指针。
析构函数，在其中用delete删除指针所指对象。
重载*和->运算符，让智能指针能和普通指针一样使用。
unique_ptr独占指针中使用xxx() = delete删除系统默认的拷贝构造函数和赋值运算符，为了防止多个智能指针控制同一个指针。
shared_ptr共享指针中不删除拷贝构造和赋值运算符。

unique_ptr是独占指针，独占某个资源的管理权，当该指针被销毁时，对象也会被销毁。由于没有引用计数的内存消耗，unique_ptr的性能比shared_ptr更好。使用unique_ptr后就最好不要再使用普通指针了。
1.创建方式：
A* a = new A();
unique_ptr<A> uptr = unique_ptr<A>(a);
或
unique_ptr<A> uptr2 = unique_ptr<A>(new A());	//更为推荐，有这种方式不再需要显示创建普通指针，也防止了一个裸指针被多个独占指针指向的风险
或
unique_ptr<int> uptr3 = make_unique<int>(5);
但是不能
unique_ptr<A> uptr4 = a;		//不能直接把一个指针赋值给只能指针初始化，智能指针的构造函数用explicit修饰了。
2.成员方法：
uptr.get()获取裸指针。多用于调用形参是裸指针类型并且只是拿来用而不负责释放指针的方法。
uptr.release()方法会释放裸指针，uptr不再管理这个指针并且自身指向nullptr，返回裸指针。多用于调用形参是裸指针类型并且负责释放指针的方法。
uptr2 = move(uptr)方法转让一个裸指针的控制权，转让后uptr为nullptr，因为直接赋值是不允许的，所以有专门的方法转让裸指针。多用于调用形参是智能指针对象的方法。
uptr.reset()方法会重置智能指针，对象会直接被释放。
3.由于是独占指针，不支持多个智能指针指向一个对象：
A* a = new A();
unique_ptr<A> uptr1 = unique_ptr<A>(a);
unique_ptr<A> uptr2 = unique_ptr<A>(a);		//当uptr1被删除后，uptr2持有的指针指向一个已经被释放的区域成为野指针，代码报错
但可以转移裸指针:
unique_ptr<int> uptr = make_unique<int>(5);
unique_ptr<int> uptr2 = move(uptr);
或
unique_ptr<int> uptr = make_unique<int>(5);
unique_ptr<int> uptr2((uptr.release());
4.由于删除了拷贝构造函数，所以调用函数作为参数不能传值，只能传引用：
void Func(unique_ptr<A> uptr1) {
}
int main() {
	unique_ptr<A> uptr1 = unique_ptr<A>(new A());
	Func(uptr1);		//报错，拷贝构造函数已被删除，想要调用把形参改为unique_ptr<A>& uptr1即可，非要传值要用move(uptr1)替代实参uptr1
}
5.可以自定义删除器(相比shared_ptr需要在模版加入删除器的类型void(*)(int*)：
void Funcc(int* p) {
	cout << "删除器" << endl;
	delete p;
}
int main() {
	unique_ptr<int, void(*)(int*)> uptr = unique_ptr<int,void(*)(int*)>(new int(2), Funcc);
}

shared_ptr内部有两个指针，一个指向对象，一个指向控制块，控制块中有引用计数、删除器等等。
shared_ptr是共享性指针，可以由多个shared_ptr指向同一个对象。其采用引用计数，当另一个shared_ptr指针指向同一个对象时，控制块的引用计数加一，当某智能指针被销毁或者reset时，引用计数减一，当引用计数为0，该对象被销毁，调用控制块的删除器，删除器调用析构函数。
初始化方法：由于拷贝构造函数和等号运算符没有被删除，可以用一个智能指针初始化另一个智能指针
	shared_ptr<int> sptr = shared_ptr<int>(new int(4));		//更推荐，因为一个裸指针不能初始化两个共享指针，为了防止犯错让裸指针隐式创建
	shared_ptr<int> sptr2 = shared_ptr<int>(sptr);
	shared_ptr<int> sptr3 = sptr;
或
	int* ptr = new int(4);
	shared_ptr<int> sptr = shared_ptr<int>(ptr);
	shared_ptr<int> sptr2 = shared_ptr<int>(sptr);
	shared_ptr<int> sptr3 = shared_ptr<int>(sptr);
但是注意
	int* ptr = new int(4);
	shared_ptr<int> sptr = shared_ptr<int>(ptr);	//正确
	shared_ptr<int> sptr2 = shared_ptr<int>(ptr);	//报错，因为一个裸指针只能用来实例化一个共享指针，
	shared_ptr<int> sptr3 =shared_ptr<int>( ptr);	//报错，当第二个共享指针想要指向该裸指针时只能用已经指向该裸指针的共享指针初始化。
成员方法：
用sptr.get()方法获取智能指针内部的原始指针。
没有release方法，因为共享指针资源释放不是一个人说了算的。
move()方法转移裸指针控制权。
用sptr.reset()方法重置智能指针，让智能指针指向0000000000000000(也就是nullptr)，会让原控制块的引用计数减1。
指定删除器：默认删除器调用delete ptr来删除裸指针指向的对象，但是数组要用delete[] ptr;删除，所以要手动指定删除器
void Func(int* ptr) {	//ptr就是裸指针
	cout << "删除器" << endl;
	delete[] ptr;
}
int main() {
	int* arr = new int[2];
	shared_ptr<int[]> sptr = shared_ptr<int[]>(arr, Func);	//只需要传入函数即可，相比unique_ptr简单很多
}
赋值运算符：
int main() {
	shared_ptr<int> pa1 = shared_ptr<int>(new int(2));
	shared_ptr<int> pa2 = shared_ptr<int>(pa1);
	shared_ptr<int> pa3 = shared_ptr<int>(pa1);

	shared_ptr<int> pb1 = shared_ptr<int>(new int(3));
	shared_ptr<int> pb2 = shared_ptr<int>(pb1);
	shared_ptr<int> pb3 = shared_ptr<int>(pb1);

	pa2 = pb3;
	cout << pa1.use_count() << endl;		//输出2，共享指针赋值过后，等号左边的共享指针就指向右边了
	cout << pb1.use_count();				//输出4
}
线程安全问题：
shared_ptr本身不是线程安全的。
shared_ptr的引用计数机制是线程安全的原子操作，但shared_ptr管理的对象本身在多线程环境下操作时可能存在线程安全问题。

循环依赖：会阻止shared_ptr智能指针释放内存导致内存泄漏。
定义：两个对象互相持有指向对方的shared_ptr指针导致无法释放内存。
例子：
shared_ptr<A> a = make_shared<A>();
shared_ptr<B> b = make_shared<B>();
a->b_ptr = b;
b->a_ptr = a;
weak_ptr是一个观察器，没有重载*和->，无法访问指针，不增加对象的引用计数，作用是与shared_ptr一起使用来解决循环依赖。
weak_ptr直接用shared_ptr来初始化或赋值：weak_ptr<int>wp = sptr;
wptr.use_count()返回对象的引用计数。
调用wptr.lock()返回指向wptr指向的对象的shared_ptr。
解决循环依赖的方法：把其中一个shared_ptr换成weak_ptr即可。

类模版：在类前一行加上template<class T1, class T2>即可
template<class T1, class T2>
class A
{
}
C#中直接在类名后面加：
    class MyClass<T>
    {
    }

explicit(明确的)，C++函数的关键字，用于防止隐式转换发生：        List<int> myList = new List<int>(10);
        myList[1] = 1;
class A {
public:
	A(int a) {
		cout << "有参构造函数";
	}
};
int main() {
	A a = 2;//发生隐式转换将2转换为A类对象，调用有参构造函数，语法正确
}
在A的构造函数前加上explicit后：
class A {
public:
	explicit A(int a) {
		cout << "有参构造函数";
	}
};
int main() {
	A a = 2;//构造函数被explicit修饰，限制隐式转换！该语句报错
}

C++源代码编译的过程：预处理、编译、汇编、链接
预处理：由预编译器负责，删除#define插入宏定义，删除#inlcude插入头文件代码，删除注释。cpp文件经过预编译过程变为.i文件。
编译：由编译器负责，有词法分析、语法分析、语义分析、中间代码生成、目标代码生成等过程。.i文件经过编译过程变为.s文件(汇编文件)。
汇编：由汇编器负责，将.s汇编文件转化为.o/obj文件(机器语言文件，由0/1构成的)。每个cpp文件对应一个.obj文件。
链接：由链接器负责，将所有obj文件和其依赖的库链接起来生成可执行文件。
而C#源码编译过程：将C#语言编译为IL语言的动态链接库文件.dll(每个解决方案对应一个dll文件)，在运行exe文件时链接所有dll文件，在CLR运行时上。

C++中char[]的长度用sizeof(crr)求，求得的长度会是正常长度+1，因为字符串常量末尾会自动加上结束符\0。

二进制和十六进制只是整数类型的其他表达形式，用其他进制声明的整数也只会以十进制的形式被保存和输出。
C++中引用#include <bitset>头文件，使用bitset<32> binary = bitset<32>(i);来获得整数类型i的二进制数组。
C#使用Convert.ToString(i, n)可以获取该整数类型的n进制表示方式的字符串，n只能是2/8/10/16。

C++的栈默认只有1MB(C#应该也是)，可以在VisualStudio中调整。而C++是允许在栈上创建数组的，所以int arr[260000];会直接报错栈溢出。
所以C++中较大的数据结构建议创建在堆上而不是栈上。

sizeof()关键字输出的是这个变量所占字节的大小，所以
int arr[100]；
char crr[100];
sizeof(arr);//400
sizeof(crr);//100

当向实参和形参都为数组时，实际上形参会用一个指针来接收数组
例如：
void Func(int arr[]) {
    cout << sizeof(arr);		//输出的是4而不是数组的字节数
}

C++位运算中只有异或符号^而没有同或，同或可以用~(a ^ b)表示。
其他位运算符：
&：按位与，对应位置上的两个操作数都为 1 时结果为 1，否则为 0。
|：按位或，对应位置上的两个操作数中只要有一个为 1，结果就为 1。
^：按位异或，对应位置上的两个操作数不相同则结果为 1，相同则结果为 0。
~：按位取反，将操作数的每一位取反，即 0 变为 1，1 变为 0。
<<：左移运算符，将操作数的所有位向左移动指定的位数。
>>：右移运算符，将操作数的所有位向右移动指定的位数。
C#中也有这些运算符。

C++中字符串转int：使用来自string库的stoi(str s)
int main() {
	string s = "wa123";
	int i = stoi(s);
	cout << i;
}
其中还有stol/stof/stod等转long/float/double类型的方法

常量指针能指向一个变量的地址。一个常量的地址只能由常量指针指向。

STL的erase(iterator i)方法删除元素会使当前迭代器失效并返回指向下一个元素的迭代器iterator，所以正确的在遍历中使用erase的方式是：
	vector<int> vec{1,2,3,4,5};
	for (vector<int>::iterator i = vec.begin(); i != vec.end();) {
		if (*i == 3)
			i = vec.erase(i);
		else
			i++;
	}

局部变量存放在栈中，动态变量用new创建存放在堆中。
c++不能用指向局部变量的指针或者引用作为函数的返回值

字符串转字符数组：
	字符串转字符数组用遍历整个字符串然后赋值。
字符数组转字符串：
	string str = crr;

void Funccc(int arr[]) {

}
实际上arr是一个指针，大小为4字节(或8字节)。
在C++中，数组是不能给数组赋值的，crr = crr2;是错误的。
而C#中，数组是引用类型，数组可以给数组赋值，crr = crr2;是正确的。放在C++中类似指向crr2的指针赋值给crr。

int类型转string：
string s = to_string(num);
char类型转string:
string s = string(1, c);

左值与右值：能取地址的就是左值，反之是右值。左值可以出现在等号左边或右边，右值只能出现在等号右边。
一、左值：即具名变量，有自己的地址，相当于正式员工
1.x++返回的是一个右值，无法取地址。
2.++x返回的是一个左值，可以取地址和赋值。
3.字符串字面量其实也是一个左值，因为在编译时字符串字面量会被存储到静态区中，就导致它也可以取到地址。&"hello"不会报错。
二、右值：即匿名变量，没有自己的地址，相当于临时工

左值引用：
左值引用即一般的正常引用，只能指向左值，使用&实现，就是在给左值起别名。
例如：
	int a = 1;
	const int b = 2;
	int& ra = a;
	const int& rb = b;
注意：常量左值引用可以指向右值
	const int& rb = 2;
左值引用的意义：
做函数参数时：减少对象赋值，提高性能。
做函数返回值时：减少拷贝，提高效率。引用返回，可修改返回对象


右值引用：
右值引用即对右值的引用，给右值起别名，使用&&实现。
例如：
MyClass Func() {
    return MyClass();
}

int main() {
    int&& a = 2;
    MyClass&& mc = Func();
}
右值引用的意义：
延长右值的生命周期，减少对象复制，提高性能。

vector快速创建二维数组：
    vector<vector<int>> vec = vector<vector<int>>(, vector<int>(n));

vector<int> vec = {1,2,3};这个过程会在栈上创建一个vec对象，里面存有指向堆中数组元素{1,2,3}的指针和数组元素的大小。{1,2,3}实际被存在了堆上。
而vector<int> vec2 = vec;在改变vec2时之所以不会同时改变vec，是因为vector实现了拷贝构造函数的重载，对其中的数组元素实现了深拷贝。
void Func(vector<int> vec, int arr[]){
	vec[0] = 999;		//vec形参的拷贝构造函数被重写，实现了深拷贝，外部的vec[0]不会被修改
	arr[0] = 999;		//arr形参被优化为一个指针，外部的arr[0]也被修改为999了
}

数组成员的初始化不能使用直接赋值的方式：
class MyClass {
public:
   int ma[2] = {1,2,3}; 	//错误！ 建议使用vector或者在构造函数中初始化
};

检测一个字符char是否为空：
if (vec[0] == '') 	//这是错误的
if (vec[0] == '\0')  //这是正确的

int main(){
    char c = 'M';
    char s1[] = { 'M','o','n','d','a','y' };
    char s2[] = "Monday";
    int num[] = { 1,2,3 };
    char* cpt = &c;
    char* spt1 = s1;
    char* spt2 = s2;
    int* numpt = num;
    cout << cpt << endl;		//输出M烫烫??帔 ，是乱码 
    cout << spt1 << endl;		//输出Monday烫烫烫烫烫烫蘉烫烫M?p鹽 ，是乱码
    cout << spt2 << endl;    	/输出/Monday ，是正确的输出
    cout << numpt << endl;	//输出00D9FA90 ，是地址
}
由此可以发现：
1.输出字符指针并不会正常输出指针指向的地址(例子中输出int指针会输出地址)，而是输出指针指向地址存的字符，并且会从该字符位置开始向后读取，直到遇到结束符号'\0'才会停止。
2.以字符串赋值字符数组，字符串末尾会自动加上\0结束符。以字符数组赋值字符数组变量，字符数组末尾不会自动添加\0结束符。这也是为什么spt1会输出乱码，而spt2能够正常输出字符串。

在C++中，实现多态有以下三种方式：
	虚函数（Dynamic Binding）
	函数重载（Function Overloading）
	模板（Templates）

私有函数可以被声明为虚函数，不会报错，但是这是毫无意义的。
C#中这样会报错。

不能声明为虚函数的有：普通函数（非成员函数）；静态成员函数；内联成员函数；构造函数；友元函数。

使用xxx() = delete;删除默认生成的函数，使用virtual xxx() = 0声明纯虚函数。

指针数组与数组指针：
指针数组是指针的数组。		int* ptr[3] = {ptr1, ptr2, ptr3};
数组指针是指向数组的指针。	int (*ptr)[3] = &arr;

数组指针与指向数组首元素的指针的区别：
int arr[] = {1,2,3};
//赋值
int* ptr = arr;			//一般指针赋值
int(*ptr2)[5] = &arr;	//数组指针赋值
//取值
cout << ptr[1];		//输出第2个元素，也可以使用*(ptr + 1)
cout << *(ptr2)[1]	//输出第2个元素，也可以使用*(*ptr2 + 1)
//运算
cout << ptr + 1;			//输出数组中第二个元素的地址
cout <<*(ptr2 + 1) - 1		//输出数组中最后一个元素的地址
总结：
数组指针赋值需要把数组arr取地址得到，把指向数组首元素的指针ptr取地址是得不到的！
当数组指针使用*求值后就变成指向数组首元素的指针。
&arr的结果是指向arr的数组指针，此时&arr + 1得到的位置是数组arr结束的位置。
数组指针的声明必须使用一个常量值(作为数组长度)，这是很奇怪的。

序列式容器：底层为线性序列的数据结构，里面存储的是元素本身。除set、map之外的容器。
关联式容器：存储的是<key, value>结构的键值对，在数据检索时比序列式容器效率更高。set、map等。

右值引用是C++11引入的一个新特性，用于实现移动语义和完美转发，其作用主要包括以下几点：
1.实现移动语义：右值引用可以绑定到临时对象（右值），通过将资源的所有权从一个对象转移到另一个对象，避免了不必要的复制和销毁操作，提高程序效率。移动语义在大规模数据结构中尤为重要，例如std::vector、std::string等。
2.支持完美转发：右值引用还可以用于函数模板的完美转发，即将参数以原始的形式传递给下一个函数，避免了不必要的复制和类型转换，提高了程序效率。
3.避免内存泄漏：右值引用可以使用std::move()函数将对象强制转换为右值，使得该对象的所有权可以被移交，从而避免了内存泄漏的问题。
总之，右值引用是C++中一项非常重要的特性，通过实现移动语义、完美转发等功能，能够提高程序效率、避免内存泄漏，并在标准库中得到了广泛的应用。

优先队列priority_queue：
1.是队列的一种，包含在queue头文件中。
2.相比普通的队列queue，priority_queue在使用push放入元素后会对其进行排序，每次pop的都是当前最大(或最小)的元素。
3.内部使用大根(小根)堆进行排序，插入、删除的时间复杂度为logn
4.一般使用的模版priority_queue<int>创建的是大根堆，pop得到的是最大值，可以看做把元素默认从小到大排列好后，pop输出的是最后的一个值
5.当想要用小根堆进行排序时，要使用模版 priority_queue<int, vector<int>, MyGreater2> pq;
其中MyGreater2是仿函数，是一个重载了()的结构体
struct MyGreater2 {
public:
    bool operator()(int p1, int p2) {
        return p1 > p2;	//可以理解为把元素从大到小排成一排，输出最后一个元素，就变成最小的元素了
    }
};
6.当想要排列其他类型时(例如map)，也要使用模版 priority_queue<pair<int, int>, vector<pair<int, int>>, MyGreater> pq;

类模版与函数模版的区别：
1.调用类模版时只能用显式的方式指定模版的参数，函数模版可以隐式调用
Person p(1000); 	//错误，未指定模版的参数
Func(100);  			//正确，隐式指定了模版的参数
2.类模版可以有初试参数，函数模版不行
template<class NameType, class AgeType = int> 
class Person{
}

友元函数：友元函数是可以访问类的私有成员的非成员函数。友元的意义是将全局函数或者其他类的成员函数当成朋友，开放给其访私有成员的权限。
样例：
class Person
{
friend void print(Person &pn);		//也可以在此处直接定义，效果相同
private:
	int age;
public:
	Person(){};
	Person(int x);
};
void print(Person &pn)
{
	//因为print是Person类的友元函数，所以在内部可以访问Person类的私有成员age
	cout << "age=" << pn.age << endl;
}
int main(){
	Person p;
	print(p);
}
0.友元函数的作用是访问一个对象的private和protected成员，普通函数传入对象只能访问其public成员
1.友元函数要先在类中用friend声明，然后直接实现或是在类外实现都可以
2. 友元函数中必须要有一个类对象的指针(或引用)作为参数
3.友元函数不是类成员，函数中不能使用this指针
4.友元函数不能被继承
5.友元函数相当于是一个全局函数，即使在类中声明并定义，也可以像全局函数一样被全局调用
6.友元函数可以是一个全局函数，也可以是另一个类的成员函数
class Person;		//提前声明，当B类的成员函数作为A类的友元函数时，会导致A和B都要知道对方的存在才能定义，所以要先把其中一个类给声明出来，这					//一步很关键
class Man
{
public:
	void print(Person& pn);
};
class Person
{
	friend void Man::print(Person &pn);
};

友元类：用于批量制造友元函数，被声明为友元类的所有成员函数都成为了友元函数
class Person
{
friend class Man;
private:
	int age = 1;
};

当一个类使用模版的时候，其他类或方法作为它的友元都要使用相同的模版。

当函数的参数是对象时，在函数定义之前必须有对象的完整类型信息
class Man;
void MyFunc(Man man) {		//报错，因为Man作为对象传递时，必须在之前已经定义好了Man类型，只是声明是不行的
}			
void MyFunc(Man& man) {		//不报错了
}	

异常处理与自定义异常类：
class MyException:public exception {
private:
	string message;
public:
	MyException(string str) {
		message = str;
	}
	const char* what() {			//return一个string就不用如何麻烦了，但是很多地方要求这种形式？
		return message.c_str();	//使用该方法返回string内的常量
	}
};
int main() {
	try {
		throw MyException("某种错误");
	}
	catch(MyException me) {
		cout << me.what();
	}
}

指针指向的对象不一定在堆中，也可以指向的是栈中的对象。
int a = 1;
int* b = &a;

头文件中最好只有声明，因为有定义的话，若多个cpp文件中包含该头文件，头文件的内容会被复制多份到多个cpp文件中，此时如果有人想要调用被多次定义的方法(变量)，就会导致符号的重定义。
或者把头文件中的定义都声明为static，也可避免重定义。

函数具有外部链接性，函数在A.cpp文件中定义，B.cpp文件声明，就可以在B.cpp文件中使用。
变量具有内部链接性，变量在A.cpp文件中赋值，B.cpp文件中要使用extern int a;来告诉编译器这个变量在其他文件中已定义，才能在B.cpp中使用该变量。

指针之间可以做减法来确定两者之间的距离，STL中的迭代器也可以

重载++运算符：
前缀++：
class A{
private：
    int value = 1;
public:
    A& operator++() {
        value ++;  // 递增对象的状态
        return *this;  // 返回递增后的对象本身的引用
    }
}
后缀++：
    A operator++(int) {
        A tmp(*this);
        value ++;  // 递增对象的状态
        return tmp;  // 返回递增后的对象本身的引用
    }
前++返回的是引用，后++由于返回的是局部变量故只能返回值。
为了区别前++和后++，在后++的参数中有一个int类型的标识
由于后++返回的是值，所以(a++)++这种操作是会报错的

奇奇怪怪的字符类型char：
    char crr[] = "123";		//正确
    char* cptr = "132";	//错误
    const char* ccptr = "123";	//正确
char[]数组将字面值常量复制到栈中，可以对其进行修改。
char*作为指针指向字面值常量的存储地址，而字面值常量禁止被修改，所以char*要加上const才允许指向字面值常量

指针数据与数组指针
指针数组：本质是一个数组，其中的每个元素都是指针。每个指针可以指向一个特定类型的数据或对象。
int* ptrArray[5]; // 声明了一个包含5个整型指针的指针数组
ptrArray[0] = 10;
数组指针：本质是一个指针，数组指针是指向数组的指针，它指向数组的第一个元素。
int arr[5] = {1, 2, 3, 4, 5};
int (*ptr)[5] = &arr; // 声明了一个指向包含5个整型元素的数组的指针
(*ptr)[0] = 10;

字符数组之间的比较要使用STL中的方法strcmp(arr1, arr2)，返回值为负则第一个串的第一个不同字符上阿斯克码更小，返回0则两字符数组相同，返回正值和负值结果相反
	char crr[] = "123";
	char crr2[] = "123";
	if (strcmp(crr, crr2) == 0) {		//正确的比较方式
		cout << "???";
	}
	if (crr == crr2) {				//不会报错，但是比较的是两个指向第一个元素的指针的地址，肯定是不一样的
		cout << "???";
	}
字符数组之间的复制要使用STL中的strcpy(target, source)方法，直接复制会报错
	crr = crr2;		//直接用=赋值字符数组，会报错，因为数组名被解释为指针常量，指向的东西无法改变
        crr = "345";		//也会报错，因为初始化后无法改变指针的指向
	strcpy(crr, crr2);	//正确的复制方式

string转char[](为了便于char*指向)使用string的.c_str()方法

非静态的成员常量在构造函数中才被初始化，和其他变量存在一起，而不是全局区。
class A {
	const int v = 1;
	int arr[v];	//报错，因为编译时v还没被赋值
};

如果在方法中使用值传递传对象的话，在方法结束时会调用形参的析构函数，导致实参中的指针成员被释放，要当心这一点。
class A {
public:
	int* age;
	A(int value) {
		age = new int(value);
	}
	~A() {
		delete age;
	}
	void PrintAge() {
		cout << *age << endl;
	}
};
void Func(A& a) {
	cout << "Func" << endl;
}
int main() {
	A a = 8;
	Func(a);		
	a.PrintAge();		//输出乱码，因为age指针已经被上一行释放了
}

只要包含一个纯虚函数的类就是抽象类(使用virtual void Test() = 0;)，该类不允许被实例化，但是可以使用该类的指针指向一个该类的子类。

同级别之间或基类转派生类的指针类型转换直接用(Derived*)basePtr会导致内存指向错误，要使用dynamic_cast<Derived*>(basePtr)。
int main() {
	Son son;
	Base1* bs1 = &son;
	bs1->Test1();
	//Base2* bs2 = (Base2*)bs1;	//强制给编译器规定该指针的类型，这样是错误的，会调用到Base1部分对应位置的内容
	Base2* bs2 = dynamic_cast<Base2*>(bs1);	//这是正确的类型转换方式
	if (bs2) {						//检查转换是否成功，因为只有同级或基类转派生类能够转换
		cout << bs2->c;
		bs2->Test2();
		bs2->Test3();
	}
}

strcpy_s(m_pszTest, nLen + 1, pszTest);比strcpy更安全，用于数组或指针的字符串拷贝。
例如：
	const char cPtr[] = "hello world";
	char* tmPtr = new char[strlen(cPtr) + 1];	//必须+1，因为字符数组需要一个额外空间存储终止符\0
	strcpy_s(tmPtr, strlen(cPtr) + 1, cPtr);		//必须+1，因为缓冲区中需要一个额外空间存储终止符\0

双重指针即指向指针的指针，使用双重指针可以在函数中修改传入的指针参数的指向。

不要对浮点类型直接使用==来对比数值，而使用
float target = xxx;
const float EPSINON =1e-6;   
if(abs(fVar - target) <= EPSNON){} 

网龙公司特有的用名词+动词作为全局函数名。